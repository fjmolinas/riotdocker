---
name: build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - '*'
jobs:
  build-riotdocker-base:
    name: Build and push images
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set latest tag
        if: ${{ github.event_name == 'push' }}
        run: |
          echo "image_tag=latest" >> $GITHUB_ENV

      - name: Set pull_request tag
        if: ${{ github.event_name != 'push' }}
        run: |
          echo "image_tag=pull_request" >> $GITHUB_ENV

      - name: Build and push riotdocker-base
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./riotdocker-base/Dockerfile
          platforms: linux/amd64
          pull: true
          push: ${{ github.event_name == 'push' }}
          load: ${{ github.event_name != 'push' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/riotdocker-base:${{ env.image_tag }}
          build-args: |
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  build-static-test-tools:
    needs: build-riotdocker-base
    name: Build and push static-test-tools
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push static-test-tools
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./static-test-tools/Dockerfile
          platforms: linux/amd64
          pull: true
          push: ${{ github.event_name == 'push' }}
          load: ${{ github.event_name != 'push' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/static-test-tools:${{ env.image_tag }}
          build-args: |
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  build-riotbuild:
    needs:
      - build-static-test-tools
    name: Build and push riotbuild
    runs-on: ubuntu-latest

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push riotbuild
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./riotbuild/Dockerfile
          platforms: linux/amd64
          pull: true
          push: ${{ github.event_name == 'push' }}
          load: ${{ github.event_name != 'push' }}
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/riotbuild:${{ env.image_tag }}
          build-args: |
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

  build-test:
    needs:
      - build-riotbuild
    name: Build and push riotbuild
    runs-on: ubuntu-latest
    env:
      - RIOT_BRANCH=2020.10-branch
    steps:
      - name: checkout
        uses: actions/checkout@v2
        with:
          name: RIOT-OS/RIOT
          ref: ${{ env.RIOT_BRANCH }}

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Inspect
        run: |
          docker image inspect riotbuild:test

      - name: Run gnu build test
        run: |
          make -CRIOT/examples/hello-world buildtest
        env:
          BUILD_IN_DOCKER=1
          DOCKER_IMAGE=riotdocker:test
          BOARDS="arduino-uno esp32-wroom-32 hifive1 msb-430h native pic32-wifire samr21-xpro"

      - name: Run llvm build test
        run: |
          make -CRIOT/examples/hello-world buildtest
        env:
          BUILD_IN_DOCKER=1
          DOCKER_IMAGE=riotdocker:test
          BOARDS="native samr21-xpro"

      - name: Run static tests
        run: |
          docker run --rm -ti -v $(pwd)/RIOT:/data/riotbuild \
          -e CI_BASE_BRANCH=${{ env.RIOT_BRANCH }} riotdocker:${{ env.image_tag }} \
          ./dist/tools/ci/static_tests.sh
