FROM ubuntu:bionic

ENV DEBIAN_FRONTEND noninteractive

# Common tools
RUN echo 'Upgrading system packages to the latest available versions' >&2 && \
    apt-get update && apt-get -y dist-upgrade \
    && echo 'Installing required packages for flashing toolchain' >&2 && \
    apt-get -y --no-install-recommends install \
        automake \
        autoconf \
        ca-certificates \
        cmake \
        curl \
        git \
        libhidapi-hidraw0 \
        libhidapi-dev \
        libreadline-dev \
        libtool \
        libusb-1.0 \
        libudev-dev \
        libusb-dev \
        make \
        pkg-config \
        python \
        python3 \
        python3-dev \
        python3-pip \
        p7zip \
        usbutils \
        unzip \
        wget \
    && echo 'Installing avrdude' >&2 && \
    apt-get -y --no-install-recommends install \
        avrdude \
# Install edbg dependencies
    && echo 'Cleaning up installation files' >&2 && \
    apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Build openocd from source
RUN echo 'Building openocd from source' >&2\
    && mkdir -p opt \
    && cd /opt \
    && git clone --depth 1 git://git.code.sf.net/p/openocd/code openocd\
    && cd openocd \
    && ./bootstrap \
    && ./configure --enable-stlink --enable-jlink --enable-ftdi --enable-cmsis-dap \
    && make -j"$(nproc)" \
    && make install-strip \
    && cd .. \
    && rm -rf openocd \
    && rm -rf /var/lib/apt/lists/*

# Build mspdebug
RUN echo 'Building mspdebug from source' >&2\
    && mkdir -p opt \
    && cd /opt \
    && git clone --depth 1 https://github.com/dlbeer/mspdebug \
    && cd mspdebug \
    && make -j"$(nproc)" \
    && make install \
    && cd .. \
    && rm -rf mspdebug \
    && rm -rf /var/lib/apt/lists/*

# Install pyocd
RUN echo 'Installing pyocd packages' >&2 \
    && pip3 install --no-cache-dir setuptools \
    && pip3 install --no-cache-dir pyocd

# Install edbg
RUN echo 'Building edbg from source' >&2\
    && mkdir -p opt \
    && cd /opt \
    && git clone --depth 1 https://github.com/ataradov/edbg \
    && cd edbg \
    && make -j"$(nproc)" \
    && make all \
    && cp edbg /usr/local/bin/edbg \
    && cd .. \
    && rm -rf edbg \
    && rm -rf /var/lib/apt/lists/*

# Create working directory for mounting the RIOT sources
RUN mkdir -m 777 -p /data/riotbuild

RUN chown root:root /usr/local/bin/edbg \
    && chmod u=rws,g=x,o=- /usr/local/bin/edbg

# Set a global system-wide git user and email address
RUN git config --system user.name "riot" && \
    git config --system user.email "riot@example.com"

# compile suid create_user binary
COPY create_user.c /tmp/create_user.c
RUN gcc -DHOMEDIR=\"/data/riotbuild\" -DUSERNAME=\"riotbuild\" /tmp/create_user.c -o /usr/local/bin/create_user \
    && chown root:root /usr/local/bin/create_user \
    && chmod u=rws,g=x,o=- /usr/local/bin/create_user \
    && rm /tmp/create_user.c

# Copy our entry point script (signal wrapper)
COPY run.sh /run.sh
ENTRYPOINT ["/bin/bash", "/run.sh"]

# By default, run a shell when no command is specified on the docker command line
CMD ["/bin/bash"]

WORKDIR /data/riotbuild
